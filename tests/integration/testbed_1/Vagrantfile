require 'json'

file = File.read('network_config.json')
vm_network_config = JSON.parse(file)['Links']

file = File.read('static_routes.json')
vm_static_routes = JSON.parse(file)

Vagrant.configure("2") do |config|
  # ssh configuration
  config.ssh.username = "vagrant"

  config.ssh.keep_alive = true

  # config.vm.box = "debian/bullseye64"
  config.vm.box = "debian_frr_linux_5.16"
  config.vm.provider "virtualbox" do |virtualbox|
    virtualbox.memory = "512"
    virtualbox.cpus = "1"
  end

  config.vm.provision "shell", inline: "apt-get install --yes python3-apt"
  config.vm.synced_folder "../../../src", "/home/vagrant/ti-mfa-src"


  # Network topology
  # see https://www.univie.ac.at/ct/stefan/gi18.pdf figure 1
  #
  #                                           Router 1
  #                                         10.200.200.1
  #                                           +-------+
  #                                    [eth1] |       | [eth3]
  #      +------------------------------------|   t   |------------------------------------+
  #  e_l |                       192.168.1.11 |       | 192.168.3.11                       |
  #   1  |                                    +-------+                                e_r |
  #      |                           192.168.2.11 | [eth2]                              3  |
  #      |                                    e_m |                                        |
  #      |                                     2  |                                        |
  #      |                                        |                                        |
  #      |                                        |                                        |
  #      | [eth1]                                 | [eth2]                          [eth2] |
  #      | 192.168.1.12                           | 192.168.2.13              192.168.3.14 |
  #  +-------+                                +-------+                                +-------+
  #  |       | [eth2]     l-to-m 4     [eth1] |       | [eth3]     m-to-r 5     [eth1] |       |
  #  |  v_l  |--------------------------------|  v_m  |--------------------------------|  v_r  |
  #  |       | 192.168.4.12      192.168.4.13 |       | 192.168.5.13      192.168.5.14 |       |
  #  +-------+                                +-------+                                +-------+
  #  10.200.200.2                            10.200.200.3                             10.200.200.4
  #  Router 2                                 Router 3                                 Router 4

  enabled_igp = ENV['ENABLED_IGP']
  enabled_igp = "" if enabled_igp == nil

  vm_network_config.each_with_index do |(machine_id, network_config), index|
    config.vm.define "#{machine_id}" do |machine|
      machine.vm.hostname = "#{machine_id}"

      network_config.each do |network_name, ip_address|
        machine.vm.network "private_network",
          ip: "#{ip_address}",
          virtualbox__intnet: "#{network_name}"
      end

      machine.vm.provision :ansible do |ansible|
        ansible.extra_vars = {
          loopback_ipv4_address: "10.200.200.#{index + 1}",
          enable_isis: enabled_igp.downcase == "isis",
          enable_ospf: enabled_igp.downcase == "ospf"
        }
        ansible.verbose = "v"
        ansible.playbook = "common.yml"
      end

      if enabled_igp != ""
        next
      end

      vm_static_routes[machine_id].each do |options, static_routes|
        static_routes.each do |static_route|
          command = "sudo ip #{options} route add #{static_route}"
          machine.vm.provision "shell", inline: "echo #{command}; #{command}"
        end
      end
    end
  end
end
