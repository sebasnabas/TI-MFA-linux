require 'json'

file = File.read('network_config.json')
vm_network_config = JSON.parse(file)['Links']

file = File.read('static_routes.json')
vm_static_routes = JSON.parse(file)

Vagrant.configure("2") do |config|
  # ssh configuration
  config.ssh.username = "vagrant"

  config.ssh.keep_alive = true

  # config.vm.box = "debian/bullseye64"
  config.vm.box = "debian_frr_linux_5.16"
  config.vm.provider "virtualbox" do |virtualbox|
    virtualbox.memory = "512"
    virtualbox.cpus = "1"
  end

  config.vm.provision "shell", inline: "apt-get install --yes python3-apt"
  config.vm.synced_folder "../../../src", "/home/vagrant/ti-mfa-src"

  # Network topology
  # see https://conferences.sigcomm.org/sosr/2017/papers/sosr17-demo-sr.pdf figure 1
  #
  # The common prefix for the interface ip addresses is 192.168
  #
  #                                   Router 1
  #                                 10.200.200.1
  #                                   +-------+
  #                      .1.11 [eth1] |   1   | [eth2] .2.11
  #      +----------------------------|   A   |----------------------------+
  #      |                            |       |                            |
  #      |                            +-------+                            |
  #    1 |                                                                 | 2
  #      |                                                                 |
  #      | [eth1] .1.12                                       .2.13 [eth1] |
  #  +-------+                                                         +-------+
  #  |   2   | [eth2] 3.12                3               .3.13 [eth2] |   3   |
  #  |   B   |---------------------------------------------------------|   C   |
  #  |       |                                                         |       |
  #  +-------+                                                         +-------+
  #      | [eth3] .4.12                                       .5.13 [eth3] |
  #      |                                                                 |
  #    4 |                                                                 | 5
  #      |                                                                 |
  #      | [eth1] .4.14                                       .5.15 [eth1] |
  #  +-------+                                                         +-------+
  #  |   4   | [eth2] .6.14               6               .6.15 [eth2] |   5   |
  #  |   D   |---------------------------------------------------------|   E   |
  #  |       |                                                         |       |
  #  +-------+                                                         +-------+
  #      | [eth3] .7.14                                       .8.15 [eth3] |
  #      |                                                                 |
  #    7 |                            +-------+                            | 8
  #      |               .7.16 [eth1] |   6   | [eth2] .8.16               |
  #      +----------------------------|   Z   |----------------------------+
  #                                   |       |
  #                                   +-------+

  enabled_igp = ENV['ENABLED_IGP']
  enabled_igp = "" if enabled_igp == nil

  vm_network_config.each_with_index do |(machine_id, network_config), index|
    config.vm.define "#{machine_id}" do |machine|
      machine.vm.hostname = "#{machine_id}"

      network_config.each do |network_name, ip_address|
        machine.vm.network "private_network",
          ip: "#{ip_address}",
          virtualbox__intnet: "#{network_name}"
      end

      machine.vm.provision :ansible do |ansible|
        ansible.extra_vars = {
          loopback_ipv4_address: "10.200.200.#{index + 1}",
          enable_isis: enabled_igp.downcase == "isis",
          enable_ospf: enabled_igp.downcase == "ospf"
        }
        ansible.verbose = "v"
        ansible.playbook = "common.yml"
      end

      if enabled_igp != ""
        next
      end

      vm_static_routes[machine_id].each do |options, static_routes|
        static_routes.each do |static_route|
          command = "sudo ip #{options} route add #{static_route}"
          machine.vm.provision "shell", inline: command
        end
      end
    end
  end
end
